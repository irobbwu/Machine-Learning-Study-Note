import numpy as npclass StandardScaler:        def __init__(self):        self.mean_ = None        self.scale_ = None            def fit(self, X):        assert X.ndim == 2, 'The dimension of X must be 2'                self.mean_ = np.array([np.mean(X[:, i]) for i in  range(X.shape[1])])        self.scale_ = np.array([np.std(X[:, i]) for i in  range(X.shape[1])])                return self        def transform(self, X):        assert X.ndim == 2, 'The dimension of X must be 2'        assert self.mean_ is not None, 'Must fit before transform!'        assert X.shape[1] == len(self.mean_), 'The feature number of X must be equal to mean_ and std_'        resX = np.empty(shape = X.shape, dtype = float)        for col in range(X.shape[1]):            resX[:, col] = (X[:, col] - self.mean_[col])/self.scale_[col]        return resX            class MinMaxScaler:        def __init__(self):        self.min_ = None        self.max_ = None            def fit(self, X):        assert X.ndim == 2, 'The dimension of X must be 2'                self.min_ = np.array([np.min(X[:, i]) for i in  range(X.shape[1])])        self.max_ = np.array([np.max(X[:, i]) for i in  range(X.shape[1])])        self.scaler_ = self.max_ - self.min_                return self        def transform(self, X):        assert X.ndim == 2, 'The dimension of X must be 2'        assert self.min_ is not None, 'Must fit before transform!'        assert X.shape[1] == len(self.min_), 'The feature number of X must be equal to min_ and max_'                resX = np.empty(shape = X.shape, dtype = float)        for col in range(X.shape[1]):            resX[:, col] = (X[:, col] - self.min_[col])/self.scaler_[col]                return resX